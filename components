import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Copy, History, RotateCcw } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface CalculationHistory {
  expression: string;
  result: string;
}

const Calculator = () => {
  const [display, setDisplay] = useState('0');
  const [previousValue, setPreviousValue] = useState<number | null>(null);
  const [operation, setOperation] = useState<string | null>(null);
  const [waitingForOperand, setWaitingForOperand] = useState(false);
  const [memory, setMemory] = useState(0);
  const [history, setHistory] = useState<CalculationHistory[]>([]);
  const [showHistory, setShowHistory] = useState(false);
  const [expression, setExpression] = useState('');
  const { toast } = useToast();

  // Keyboard support
  useEffect(() => {
    const handleKeyPress = (event: KeyboardEvent) => {
      const key = event.key;
      
      if (key >= '0' && key <= '9') {
        inputNumber(key);
      } else if (key === '.') {
        handleDecimal();
      } else if (key === '+') {
        inputOperation('+');
      } else if (key === '-') {
        inputOperation('-');
      } else if (key === '*') {
        inputOperation('×');
      } else if (key === '/') {
        event.preventDefault();
        inputOperation('÷');
      } else if (key === 'Enter' || key === '=') {
        handleEquals();
      } else if (key === 'Escape' || key === 'c' || key === 'C') {
        handleClear();
      } else if (key === 'Backspace') {
        handleBackspace();
      } else if (key === '%') {
        handlePercentage();
      }
    };

    window.addEventListener('keydown', handleKeyPress);
    return () => window.removeEventListener('keydown', handleKeyPress);
  }, [display, operation, previousValue, waitingForOperand]);

  const inputNumber = (num: string) => {
    if (waitingForOperand) {
      setDisplay(num);
      setWaitingForOperand(false);
      if (operation && previousValue !== null) {
        setExpression(`${previousValue} ${operation} ${num}`);
      } else {
        setExpression(num);
      }
    } else {
      const newDisplay = display === '0' ? num : display + num;
      setDisplay(newDisplay);
      if (operation && previousValue !== null) {
        setExpression(`${previousValue} ${operation} ${newDisplay}`);
      } else {
        setExpression(newDisplay);
      }
    }
  };

  const inputOperation = (nextOperation: string) => {
    const inputValue = parseFloat(display);

    if (isNaN(inputValue)) {
      toast({
        title: "Error",
        description: "Invalid number",
        variant: "destructive",
      });
      return;
    }

    if (previousValue === null) {
      setPreviousValue(inputValue);
      setExpression(`${inputValue} ${nextOperation}`);
    } else if (operation) {
      const currentValue = previousValue || 0;
      const newValue = calculate(currentValue, inputValue, operation);

      if (newValue === null) return;

      setDisplay(String(newValue));
      setPreviousValue(newValue);
      setExpression(`${newValue} ${nextOperation}`);
    }

    setWaitingForOperand(true);
    setOperation(nextOperation);
  };

  const calculate = (firstValue: number, secondValue: number, operation: string): number | null => {
    let result: number;
    
    switch (operation) {
      case '+':
        result = firstValue + secondValue;
        break;
      case '-':
        result = firstValue - secondValue;
        break;
      case '×':
        result = firstValue * secondValue;
        break;
      case '÷':
        if (secondValue === 0) {
          toast({
            title: "Error",
            description: "Cannot divide by zero",
            variant: "destructive",
          });
          return null;
        }
        result = firstValue / secondValue;
        break;
      default:
        return secondValue;
    }

    // Round to avoid floating point precision issues
    return Math.round(result * 100000000) / 100000000;
  };

  const handleEquals = () => {
    const inputValue = parseFloat(display);

    if (previousValue !== null && operation) {
      const newValue = calculate(previousValue, inputValue, operation);
      if (newValue === null) return;

      const fullExpression = `${previousValue} ${operation} ${inputValue}`;
      
      setDisplay(String(newValue));
      setHistory(prev => [{
        expression: fullExpression,
        result: String(newValue)
      }, ...prev.slice(0, 9)]); // Keep last 10 calculations
      
      setPreviousValue(null);
      setOperation(null);
      setWaitingForOperand(true);
      setExpression(String(newValue));
    }
  };

  const handleClear = () => {
    setDisplay('0');
    setPreviousValue(null);
    setOperation(null);
    setWaitingForOperand(false);
    setExpression('');
  };

  const handleBackspace = () => {
    if (display !== '0' && !waitingForOperand) {
      const newDisplay = display.slice(0, -1) || '0';
      setDisplay(newDisplay);
      if (!operation) {
        setExpression(newDisplay === '0' ? '' : newDisplay);
      }
    }
  };

  const handleDecimal = () => {
    if (waitingForOperand) {
      setDisplay('0.');
      setWaitingForOperand(false);
    } else if (display.indexOf('.') === -1) {
      setDisplay(display + '.');
    }
  };

  const handlePercentage = () => {
    const currentValue = parseFloat(display);
    if (!isNaN(currentValue)) {
      const result = currentValue / 100;
      setDisplay(String(result));
      setExpression(String(result));
      setWaitingForOperand(true);
    }
  };

  const handleSquareRoot = () => {
    const currentValue = parseFloat(display);
    if (currentValue < 0) {
      toast({
        title: "Error",
        description: "Cannot calculate square root of negative number",
        variant: "destructive",
      });
      return;
    }
    const result = Math.sqrt(currentValue);
    setDisplay(String(result));
    setExpression(`√${currentValue}`);
    setWaitingForOperand(true);
  };

  const handlePlusMinus = () => {
    const currentValue = parseFloat(display);
    if (!isNaN(currentValue) && currentValue !== 0) {
      const result = -currentValue;
      setDisplay(String(result));
      if (!operation) {
        setExpression(String(result));
      }
    }
  };

  // Memory functions
  const memoryAdd = () => {
    const currentValue = parseFloat(display);
    if (!isNaN(currentValue)) {
      setMemory(prev => prev + currentValue);
      toast({
        title: "Memory",
        description: `Added ${currentValue} to memory`,
      });
    }
  };

  const memorySubtract = () => {
    const currentValue = parseFloat(display);
    if (!isNaN(currentValue)) {
      setMemory(prev => prev - currentValue);
      toast({
        title: "Memory",
        description: `Subtracted ${currentValue} from memory`,
      });
    }
  };

  const memoryRecall = () => {
    setDisplay(String(memory));
    setExpression(String(memory));
    setWaitingForOperand(true);
  };

  const memoryClear = () => {
    setMemory(0);
    toast({
      title: "Memory",
      description: "Memory cleared",
    });
  };

  const copyToClipboard = async () => {
    try {
      await navigator.clipboard.writeText(display);
      toast({
        title: "Copied",
        description: "Result copied to clipboard",
      });
    } catch (err) {
      toast({
        title: "Error",
        description: "Failed to copy to clipboard",
        variant: "destructive",
      });
    }
  };

  const formatDisplay = (value: string) => {
    if (value.length > 12) {
      const num = parseFloat(value);
      return num.toExponential(6);
    }
    return value;
  };

  const loadFromHistory = (historyItem: CalculationHistory) => {
    setDisplay(historyItem.result);
    setExpression(historyItem.result);
    setWaitingForOperand(true);
    setShowHistory(false);
  };

  return (
    <div className="w-full max-w-sm mx-auto">
      <div className="bg-card shadow-calc rounded-2xl p-6 space-y-4">
        {/* Display */}
        <div className="bg-gradient-display shadow-display rounded-xl p-6">
          {/* Expression */}
          <div className="text-sm text-muted-foreground mb-2 min-h-[1.5rem] flex items-center justify-end">
            {expression}
          </div>
          
          {/* Main Display */}
          <div className="text-4xl font-mono font-light text-foreground min-h-[3rem] flex items-center justify-end overflow-hidden">
            {formatDisplay(display)}
          </div>
          
          {/* Controls */}
          <div className="flex justify-between items-center mt-4">
            <div className="flex gap-2">
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setShowHistory(!showHistory)}
                className="text-xs"
              >
                <History className="w-4 h-4" />
              </Button>
              <Button
                variant="ghost"
                size="sm"
                onClick={copyToClipboard}
                className="text-xs"
              >
                <Copy className="w-4 h-4" />
              </Button>
            </div>
            
            {memory !== 0 && (
              <div className="text-xs text-primary font-semibold">
                M: {memory}
              </div>
            )}
          </div>
        </div>

        {/* History Panel */}
        {showHistory && (
          <div className="bg-muted rounded-xl p-4">
            <div className="flex justify-between items-center mb-2">
              <h3 className="text-sm font-semibold">History</h3>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setHistory([])}
              >
                <RotateCcw className="w-4 h-4" />
              </Button>
            </div>
            <ScrollArea className="h-32">
              {history.length === 0 ? (
                <p className="text-xs text-muted-foreground">No calculations yet</p>
              ) : (
                <div className="space-y-1">
                  {history.map((item, index) => (
                    <button
                      key={index}
                      onClick={() => loadFromHistory(item)}
                      className="w-full text-left text-xs p-2 rounded hover:bg-accent transition-colors"
                    >
                      <div>{item.expression} = {item.result}</div>
                    </button>
                  ))}
                </div>
              )}
            </ScrollArea>
          </div>
        )}

        {/* Button Grid */}
        <div className="grid grid-cols-4 gap-3">
          {/* Row 1 - Memory & Clear */}
          <Button
            variant="calc-clear"
            size="calc-button"
            onClick={handleClear}
          >
            AC
          </Button>
          <Button
            variant="calc-operation"
            size="calc-button"
            onClick={handlePlusMinus}
          >
            ±
          </Button>
          <Button
            variant="calc-operation"
            size="calc-button"
            onClick={handlePercentage}
          >
            %
          </Button>
          <Button
            variant="calc-operation"
            size="calc-button"
            onClick={() => inputOperation('÷')}
          >
            ÷
          </Button>

          {/* Row 2 */}
          <Button
            variant="calc-number"
            size="calc-button"
            onClick={() => inputNumber('7')}
          >
            7
          </Button>
          <Button
            variant="calc-number"
            size="calc-button"
            onClick={() => inputNumber('8')}
          >
            8
          </Button>
          <Button
            variant="calc-number"
            size="calc-button"
            onClick={() => inputNumber('9')}
          >
            9
          </Button>
          <Button
            variant="calc-operation"
            size="calc-button"
            onClick={() => inputOperation('×')}
          >
            ×
          </Button>

          {/* Row 3 */}
          <Button
            variant="calc-number"
            size="calc-button"
            onClick={() => inputNumber('4')}
          >
            4
          </Button>
          <Button
            variant="calc-number"
            size="calc-button"
            onClick={() => inputNumber('5')}
          >
            5
          </Button>
          <Button
            variant="calc-number"
            size="calc-button"
            onClick={() => inputNumber('6')}
          >
            6
          </Button>
          <Button
            variant="calc-operation"
            size="calc-button"
            onClick={() => inputOperation('-')}
          >
            −
          </Button>

          {/* Row 4 */}
          <Button
            variant="calc-number"
            size="calc-button"
            onClick={() => inputNumber('1')}
          >
            1
          </Button>
          <Button
            variant="calc-number"
            size="calc-button"
            onClick={() => inputNumber('2')}
          >
            2
          </Button>
          <Button
            variant="calc-number"
            size="calc-button"
            onClick={() => inputNumber('3')}
          >
            3
          </Button>
          <Button
            variant="calc-operation"
            size="calc-button"
            onClick={() => inputOperation('+')}
          >
            +
          </Button>

          {/* Row 5 */}
          <Button
            variant="calc-number"
            size="calc-button-wide"
            onClick={() => inputNumber('0')}
            className="col-span-2"
          >
            0
          </Button>
          <Button
            variant="calc-number"
            size="calc-button"
            onClick={handleDecimal}
          >
            .
          </Button>
          <Button
            variant="calc-equals"
            size="calc-button"
            onClick={handleEquals}
          >
            =
          </Button>

          {/* Row 6 - Memory Functions */}
          <Button
            variant="calc-operation"
            size="calc-button"
            onClick={memoryClear}
            className="text-xs"
          >
            MC
          </Button>
          <Button
            variant="calc-operation"
            size="calc-button"
            onClick={memoryRecall}
            className="text-xs"
          >
            MR
          </Button>
          <Button
            variant="calc-operation"
            size="calc-button"
            onClick={memorySubtract}
            className="text-xs"
          >
            M-
          </Button>
          <Button
            variant="calc-operation"
            size="calc-button"
            onClick={memoryAdd}
            className="text-xs"
          >
            M+
          </Button>

          {/* Row 7 - Advanced Functions */}
          <Button
            variant="calc-operation"
            size="calc-button"
            onClick={handleSquareRoot}
            className="text-xs col-span-2"
          >
            √x
          </Button>
          <Button
            variant="calc-operation"
            size="calc-button"
            onClick={handleBackspace}
            className="col-span-2"
          >
            ⌫
          </Button>
        </div>
      </div>
    </div>
  );
};

export default Calculator;
